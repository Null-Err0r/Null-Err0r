name: AI Assistant & README Updater

on:
  issues:
    types: [opened]
  workflow_dispatch:

permissions:
  issues: write
  contents: write

jobs:
  run_ai_bot_and_update_readme:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Call AI Worker API
        id: ai_response
        if: github.event_name == 'issues'
        run: |
          RAW_RESPONSE=$(curl -s -X POST "${{ secrets.WORKER_URL }}" \
            -H "Content-Type: application/json" \
            -d '{"prompt": "${{ github.event.issue.body }}"}')
          {
            echo "raw_text<<EOF"
            echo "$RAW_RESPONSE"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Parse Stream and Post Comment
        if: github.event_name == 'issues'
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = context?.issue?.number;
            if (!issue_number) {
              console.log("Skipping comment: Not triggered by an issue event.");
              return;
            }

            const rawResponse = `${{ steps.ai_response.outputs.raw_text }}`.trim();
            const lines = rawResponse.split('\n');
            let fullResponse = '';
            for (const line of lines) {
              if (line.startsWith('data:')) {
                const jsonString = line.substring(5).trim();
                if (jsonString && jsonString !== '[DONE]') {
                  try {
                    const data = JSON.parse(jsonString);
                    if (data.response) fullResponse += data.response;
                  } catch (e) {
                    console.warn('Parse error:', jsonString);
                  }
                }
              }
            }

            const body = `ðŸ¤– **AI Assistant:**\n\n${fullResponse.trim() || 'Sorry, I could not generate a response.'}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body
            });

      - name: Close the issue
        if: github.event_name == 'issues'
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = context?.issue?.number;
            if (!issue_number) {
              console.log("Skipping close: Not triggered by an issue event.");
              return;
            }
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              state: 'closed'
            })

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Get latest 20 conversations and save to file
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p tmp_issues
          gh issue list --repo ${{ github.repository }} --state closed --limit 20 --json number,title,url > tmp_issues/list.json

          echo "[" > issues.json
          index=0
          total=$(jq length tmp_issues/list.json)
          jq -c '.[]' tmp_issues/list.json | while read issue; do
            number=$(echo "$issue" | jq -r .number)
            title=$(echo "$issue" | jq -r .title)
            url=$(echo "$issue" | jq -r .url)
            last_comment=$(gh api repos/${{ github.repository }}/issues/$number/comments --jq '.[-1].body' 2>/dev/null | head -c 500 | jq -Rs .)
            if [ "$last_comment" = "null" ]; then last_comment="\"\""; fi
            echo "  {\"title\": $(echo "$title" | jq -Rs .), \"url\": \"$url\", \"last_comment\": $last_comment}" >> issues.json
            index=$((index + 1))
            if [ $index -lt $total ]; then echo "," >> issues.json; fi
          done
          echo "]" >> issues.json

      - name: Update README with recent conversations
        run: python scripts/update_ai_chat.py

    - name: Commit and push if there are changes
      run: |
         git config --global user.name "github-actions[bot]"
         git config --global user.email "github-actions[bot]@users.noreply.github.com"
         git add README.md
         if ! git diff --staged --quiet; then
            git commit -m "docs: update recent AI conversations"
            git push
         else
           echo "No changes to commit."
         fi
