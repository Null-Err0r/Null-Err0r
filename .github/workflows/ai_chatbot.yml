name: AI Assistant & README Updater

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: write

jobs:
  run_ai_bot_and_update_readme:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Call AI Worker API
        id: ai_response
        run: |
          RAW_RESPONSE=$(curl -s -X POST "${{ secrets.WORKER_URL }}" \
            -H "Content-Type: application/json" \
            -d '{"prompt": "${{ github.event.issue.body }}"}')
          
          {
            echo "raw_text<<EOF"
            echo "$RAW_RESPONSE"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Parse Stream and Post Comment
        uses: actions/github-script@v6
        with:
          script: |
            const rawResponse = `${{ steps.ai_response.outputs.raw_text }}`.trim();
            const lines = rawResponse.split('\n');
            let fullResponse = '';

            for (const line of lines) {
              if (line.startsWith('data:')) {
                const jsonString = line.substring(5).trim();
                if (jsonString && jsonString !== '[DONE]') {
                  try {
                    const data = JSON.parse(jsonString);
                    if (data.response) {
                      fullResponse += data.response;
                    }
                  } catch (e) {
                    console.warn('Could not parse line:', jsonString);
                  }
                }
              }
            }

            const body = `ðŸ¤– **AI Assistant:**\n\n${fullResponse.trim() || 'Sorry, I could not generate a response.'}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

      - name: Close the issue
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Get latest 20 conversations
        id: get_issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          issues_json=$(gh issue list --repo ${{ github.repository }} --limit 20 --state closed --json title,url)
          echo "issues_json=$issues_json" >> $GITHUB_OUTPUT

      - name: Update README with recent conversations
        run: echo "${{ steps.get_issues.outputs.issues_json }}" | python scripts/update_ai_chat.py

      - name: Commit and push if there are changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          if ! git diff --staged --quiet; then
            git commit -m "docs: update recent AI conversations"
            git push
          else
            echo "No changes to commit."
          fi
